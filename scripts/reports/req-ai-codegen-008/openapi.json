{
  "components": {
    "parameters": {
      "XRequestId": {
        "in": "header",
        "name": "X-Request-Id",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "Error": {
        "content": {
          "application/json": {
            "examples": {
              "authFailed": {
                "value": {
                  "code": "E1100",
                  "detail": {
                    "error": "missing Authorization"
                  },
                  "hint": "请提供Authorization: Bearer \u003ctoken\u003e",
                  "message": "AuthFailed",
                  "requestId": "00000000-0000-0000-0000-000000000000",
                  "severity": "warning"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "description": "Error"
      },
      "OK": {
        "content": {
          "application/json": {
            "examples": {
              "success": {
                "value": {
                  "code": "OK",
                  "data": {
                    "example": "value"
                  },
                  "message": "success",
                  "requestId": "00000000-0000-0000-0000-000000000000",
                  "severity": "info"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/Response"
            }
          }
        },
        "description": "OK"
      }
    },
    "schemas": {
      "BackendFixRequest": {
        "properties": {
          "diff": {
            "type": "object"
          },
          "reportId": {
            "type": "string"
          }
        },
        "required": [
          "reportId",
          "diff"
        ],
        "type": "object"
      },
      "BackendGenerateRequest": {
        "properties": {
          "name": {
            "type": "string"
          },
          "spec": {
            "type": "object"
          },
          "template": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "spec"
        ],
        "type": "object"
      },
      "BackendScaffoldRequest": {
        "properties": {
          "endpoints": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "serviceName": {
            "type": "string"
          }
        },
        "required": [
          "serviceName",
          "endpoints"
        ],
        "type": "object"
      },
      "BillingCreateOrderRequest": {
        "properties": {
          "amount": {
            "type": "integer"
          },
          "currency": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        },
        "required": [
          "productId",
          "amount",
          "currency"
        ],
        "type": "object"
      },
      "BillingCreatePaymentRequest": {
        "properties": {
          "method": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          }
        },
        "required": [
          "orderId",
          "method"
        ],
        "type": "object"
      },
      "ErrorResponse": {
        "properties": {
          "code": {
            "enum": [
              "E1000",
              "E1100",
              "E1200",
              "E1300",
              "E1400",
              "E1500",
              "E2000",
              "E2100",
              "E3000",
              "E3100"
            ],
            "type": "string"
          },
          "detail": {
            "type": "object"
          },
          "hint": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "severity": {
            "enum": [
              "info",
              "warning",
              "error"
            ],
            "type": "string"
          }
        },
        "required": [
          "code",
          "message",
          "requestId"
        ],
        "type": "object"
      },
      "FrontendCommitRequest": {
        "properties": {
          "message": {
            "type": "string"
          },
          "snapshotId": {
            "type": "string"
          }
        },
        "required": [
          "snapshotId"
        ],
        "type": "object"
      },
      "FrontendGenerateRequest": {
        "properties": {
          "dsl": {
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "template": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "dsl"
        ],
        "type": "object"
      },
      "FrontendValidateRequest": {
        "properties": {
          "dsl": {
            "type": "object"
          }
        },
        "required": [
          "dsl"
        ],
        "type": "object"
      },
      "LLMChatRequest": {
        "properties": {
          "messages": {
            "items": {
              "properties": {
                "content": {
                  "type": "string"
                },
                "role": {
                  "type": "string"
                }
              },
              "required": [
                "role",
                "content"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "modelId": {
            "type": "string"
          },
          "providerHint": {
            "type": "string"
          },
          "stream": {
            "type": "boolean"
          },
          "temperature": {
            "type": "number"
          },
          "topP": {
            "type": "number"
          }
        },
        "required": [
          "modelId",
          "messages"
        ],
        "type": "object"
      },
      "LLMEmbeddingsRequest": {
        "properties": {
          "input": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "modelId": {
            "type": "string"
          }
        },
        "required": [
          "modelId",
          "input"
        ],
        "type": "object"
      },
      "LLMModerateRequest": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "required": [
          "input"
        ],
        "type": "object"
      },
      "ObserveEventRequest": {
        "properties": {
          "message": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "severity"
        ],
        "type": "object"
      },
      "Response": {
        "properties": {
          "code": {
            "enum": [
              "OK"
            ],
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "message": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "severity": {
            "enum": [
              "info",
              "warning",
              "error"
            ],
            "type": "string"
          }
        },
        "required": [
          "code",
          "message",
          "requestId"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "scheme": "bearer",
        "type": "http"
      },
      "headerPermissions": {
        "in": "header",
        "name": "X-User-Permissions",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "title": "Xingzuo API",
    "version": "v1"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/ai/backend/fix": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackendFixRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Fix backend"
      }
    },
    "/api/v1/ai/backend/generate": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackendGenerateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Generate backend"
      }
    },
    "/api/v1/ai/backend/scaffold": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackendScaffoldRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Scaffold backend"
      }
    },
    "/api/v1/ai/backend/templates": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "List backend templates"
      }
    },
    "/api/v1/ai/frontend/commit": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FrontendCommitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Commit frontend snapshot"
      }
    },
    "/api/v1/ai/frontend/generate": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FrontendGenerateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Generate frontend"
      }
    },
    "/api/v1/ai/frontend/templates": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "List frontend templates"
      }
    },
    "/api/v1/ai/frontend/validate": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FrontendValidateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Validate frontend"
      }
    },
    "/api/v1/ai/integration/diagnose": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Integration diagnose"
      }
    },
    "/api/v1/ai/integration/patch": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Integration patch"
      }
    },
    "/api/v1/ai/integration/reports": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Integration reports"
      }
    },
    "/api/v1/ai/integration/test": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Integration test"
      }
    },
    "/api/v1/articles": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "List articles"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Create article"
      }
    },
    "/api/v1/articles/:id": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Delete article"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Get article"
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Update article"
      }
    },
    "/api/v1/articles/stream": {
      "get": {
        "description": "Server-Sent Events stream for article operations. Content-Type: text/event-stream. Frames include data (payload), heartbeat (keep-alive), and a terminal 'event: done'. Requires bearer authentication and 'articles' permission via RBAC. Errors follow unified ErrorResponse codes and structure.",
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          },
          {
            "description": "Streaming mode: 'example' emits demo frames; 'list' streams current articles as JSON frames",
            "in": "query",
            "name": "mode",
            "required": false,
            "schema": {
              "enum": [
                "example",
                "list"
              ],
              "type": "string"
            }
          },
          {
            "description": "Heartbeat comment frame interval in milliseconds (default 5ms; bounds 1–10000ms)",
            "example": 5,
            "examples": {
              "fast": {
                "summary": "Fast",
                "value": 5
              },
              "medium": {
                "summary": "Medium",
                "value": 50
              },
              "slow": {
                "summary": "Slow",
                "value": 500
              }
            },
            "in": "query",
            "name": "heartbeatMs",
            "required": false,
            "schema": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Page size when mode=list (1-1000). Prefer over legacy 'limit'",
            "example": 10,
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Cursor: start after the given article ID when mode=list",
            "example": "article-id-123",
            "in": "query",
            "name": "afterId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter items by authorId when mode=list",
            "example": "u1",
            "in": "query",
            "name": "authorId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Structured search: substring match on title (case-insensitive)",
            "example": "Hello",
            "in": "query",
            "name": "qTitle",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Structured search: substring match on content (case-insensitive)",
            "example": "World",
            "in": "query",
            "name": "qContent",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Structured search: comma-separated tags. Use qTagsOp=all to require all tags, qTagsOp=any to match any",
            "example": "t1,t2",
            "in": "query",
            "name": "qTags",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Exclude items containing any of these comma-separated tags",
            "example": "t3,t4",
            "in": "query",
            "name": "qNotTags",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tag match operator: all (intersection) or any (union); default all",
            "example": "all",
            "in": "query",
            "name": "qTagsOp",
            "required": false,
            "schema": {
              "enum": [
                "all",
                "any"
              ],
              "type": "string"
            }
          },
          {
            "description": "Combine structured filters using logical 'or' or 'and' (default 'or')",
            "example": "or",
            "in": "query",
            "name": "qOp",
            "required": false,
            "schema": {
              "enum": [
                "or",
                "and"
              ],
              "type": "string"
            }
          },
          {
            "description": "Tag weights mapping as 'tag:weight' pairs, comma-separated; used to score items",
            "example": "t1:2,t2:1",
            "in": "query",
            "name": "qTagWeights",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Minimum cumulative tag weight threshold to include an item",
            "example": 2,
            "in": "query",
            "name": "qTagMinWeight",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Include items created within the last N milliseconds",
            "example": 60000,
            "in": "query",
            "name": "createdWithinMs",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Include items created older than N milliseconds",
            "example": 3600000,
            "in": "query",
            "name": "createdOlderThanMs",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Include items created at or after the given RFC3339 timestamp",
            "example": "2025-09-30T21:00:00Z",
            "in": "query",
            "name": "createdStart",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Include items created at or before the given RFC3339 timestamp",
            "example": "2025-09-30T22:00:00Z",
            "in": "query",
            "name": "createdEnd",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Keep stream open to push newly created matching items (mode=list)",
            "example": true,
            "in": "query",
            "name": "follow",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Max follow duration in milliseconds (bounds 1–60000ms; default 2000ms, env adjustable)",
            "example": 2000,
            "in": "query",
            "name": "followMaxMs",
            "required": false,
            "schema": {
              "maximum": 60000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Buffer window in milliseconds to aggregate new items before flush",
            "example": 10,
            "in": "query",
            "name": "followBufferMs",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Max items per flush batch during follow mode",
            "example": 100,
            "in": "query",
            "name": "followBatchMax",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "[Legacy] Max number of items (use 'pageSize')",
            "example": 10,
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "[Legacy] Start offset (prefer 'afterId' cursor)",
            "example": 0,
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "[Legacy] Keyword across title/content/tags (case-insensitive contains)",
            "example": "hello",
            "in": "query",
            "name": "q",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Articles SSE stream",
        "x-response-content-type": "text/event-stream",
        "x-sse": {
          "contentType": "text/event-stream",
          "errorExamples": [
            {
              "body": {
                "code": "E1100",
                "message": "AuthFailed",
                "requestId": "00000000-0000-0000-0000-000000000000",
                "severity": "warning"
              },
              "contentType": "application/json",
              "status": 401
            },
            {
              "body": {
                "code": "E1200",
                "detail": {
                  "reason": "权限中途变更"
                },
                "message": "PermissionDenied",
                "requestId": "00000000-0000-0000-0000-000000000000",
                "severity": "warning"
              },
              "contentType": "application/json",
              "status": 403
            },
            {
              "body": {
                "code": "E1300",
                "message": "RateLimited",
                "requestId": "00000000-0000-0000-0000-000000000000",
                "severity": "warning"
              },
              "contentType": "application/json",
              "status": 429
            },
            {
              "body": {
                "code": "E3001",
                "detail": {
                  "hint": "SSE不支持"
                },
                "message": "StreamError",
                "requestId": "00000000-0000-0000-0000-000000000000",
                "severity": "error"
              },
              "contentType": "application/json",
              "status": 500
            }
          ],
          "examples": {
            "exampleMode": {
              "body": "data: part-1\n\n:heartbeat\n\ndata: part-2\n\nevent: done\n\n",
              "summary": "Demo frames"
            },
            "followMode": {
              "body": "event: item\n\ndata: {\"id\":\"a1\"}\n\n:heartbeat\n\n:heartbeat\n\nevent: item\n\ndata: {\"id\":\"a3\"}\n\nevent: done\n\n",
              "summary": "Follow new items"
            },
            "heartbeatLoss": {
              "body": "event: item\n\ndata: {\"id\":\"a20\"}\n\n:heartbeat\n\n// network drop (no heartbeats)\n\nevent: item\n\ndata: {\"id\":\"a21\"}\n\n:heartbeat\n\nevent: done\n\n",
              "summary": "Heartbeat loss and late recovery"
            },
            "jitter": {
              "body": "event: item\n\ndata: {\"id\":\"a10\"}\n\n:heartbeat\n\n// transient jitter\n\n:heartbeat\n\n:heartbeat\n\nevent: item\n\ndata: {\"id\":\"a11\"}\n\nevent: done\n\n",
              "summary": "Network jitter with variable heartbeats"
            },
            "listMode": {
              "body": "event: item\n\ndata: {\"id\":\"a1\"}\n\n:heartbeat\n\nevent: item\n\ndata: {\"id\":\"a2\"}\n\nevent: done\n\n",
              "summary": "List items"
            },
            "serverRestartRecovery": {
              "body": "retry: 1000\n\nid: a30\n\nevent: item\n\ndata: {\"id\":\"a30\"}\n\n// server restarts; client reconnects with Last-Event-ID: a30\n\nevent: item\n\nid: a31\n\ndata: {\"id\":\"a31\"}\n\nevent: done\n\n",
              "summary": "Server restart with reconnection guidance"
            }
          },
          "frameFields": {
            "event": "optional event name for the following data",
            "id": "optional message id for reconnection",
            "retry": "client reconnection delay in milliseconds"
          },
          "notes": "Heartbeat is an SSE comment frame (':heartbeat'). Interval configurable via 'heartbeatMs' query param (default 5ms; bounds 1–10000ms). List mode supports structured filters (qTitle, qContent, qTags/qNotTags with qOp), tag weighting (qTagWeights + qTagMinWeight), relative time windows (createdWithinMs/createdOlderThanMs) and absolute ranges (createdStart/createdEnd), cursor pagination (afterId, pageSize), and optional follow streaming (follow, followMaxMs, followBufferMs, followBatchMax). For restart recovery, servers may emit 'id' and 'retry' fields; clients can reconnect with 'Last-Event-ID'. Termination is signaled via 'event: done'."
        },
        "x-streaming": true
      }
    },
    "/api/v1/billing/invoices": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "List invoices"
      }
    },
    "/api/v1/billing/orders": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingCreateOrderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Create order"
      }
    },
    "/api/v1/billing/payments": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingCreatePaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Create payment"
      }
    },
    "/api/v1/billing/plans": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "List plans"
      }
    },
    "/api/v1/llm/chat": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LLMChatRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Unified LLM chat"
      }
    },
    "/api/v1/llm/embeddings": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LLMEmbeddingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Generate embeddings"
      }
    },
    "/api/v1/llm/models": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "List LLM models"
      }
    },
    "/api/v1/llm/moderate": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LLMModerateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Content moderation"
      }
    },
    "/api/v1/llm/providers": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "List LLM providers"
      }
    },
    "/api/v1/observe/events": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObserveEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Post event"
      }
    },
    "/api/v1/observe/metrics": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Metrics"
      }
    },
    "/api/v1/observe/traces": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "headerPermissions": []
          }
        ],
        "summary": "Traces"
      }
    },
    "/api/v1/registry": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "API registry"
      }
    },
    "/api/v1/registry/openapi": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/XRequestId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OK"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "OpenAPI spec"
      }
    }
  }
}