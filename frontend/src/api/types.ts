/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/public/auth/login": {
    /**
     * Public login
     * @description Issue HS256 JWT with claims: sub (userId), permissions, exp. This endpoint is public and does not require authentication.
     */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["AuthLoginRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/backend/fix": {
    /** Fix backend */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["BackendFixRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/backend/generate": {
    /** Generate backend */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["BackendGenerateRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/backend/scaffold": {
    /** Scaffold backend */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["BackendScaffoldRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/backend/templates": {
    /** List backend templates */
    get: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/clarify/export": {
    /**
     * Export clarify as Markdown
     * @description 根据 prompt 与 language 导出 Markdown 文档（format=md）。不需要审批票据。
     */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ClarifyExportMarkdownRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/clarify/export/docx": {
    /**
     * Export latest Markdown to DOCX
     * @description 将最近一次 Markdown 导出转换为 DOCX（Pandoc）。需在请求头携带审批票据 X-Approval-Ticket。
     */
    post: {
      parameters: {
        header: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
          "X-Approval-Ticket": components["parameters"]["XApprovalTicket"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/clarify/export/pdf": {
    /**
     * Export latest Markdown to PDF
     * @description 将最近一次 Markdown 导出转换为 PDF（Pandoc + XeLaTeX 或 wkhtmltopdf）。需在请求头携带审批票据 X-Approval-Ticket。
     */
    post: {
      parameters: {
        header: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
          "X-Approval-Ticket": components["parameters"]["XApprovalTicket"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/clarify/generate": {
    /**
     * Generate clarify artifacts
     * @description 根据自然语言 prompt 生成结构化澄清产物（requirements/design/tasks）与最小 OpenAPI 片段。需携带 RBAC 权限 'ai.clarify'。
     */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ClarifyGenerateRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/clarify/stream": {
    /**
     * Clarify SSE stream
     * @description 以 Server-Sent Events 流式返回澄清产物分片。Content-Type: text/event-stream；终止帧为 'event: done'。需携带 RBAC 权限 'ai.clarify'。
     */
    get: {
      parameters: {
        query?: {
          /** @description 自然语言 prompt */
          prompt?: string;
          /** @description 输出语言（默认 zh-CN） */
          language?: string;
        };
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/frontend/commit": {
    /** Commit frontend snapshot */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["FrontendCommitRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/frontend/generate": {
    /** Generate frontend */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["FrontendGenerateRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/frontend/templates": {
    /** List frontend templates */
    get: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/frontend/validate": {
    /** Validate frontend */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["FrontendValidateRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/integration/diagnose": {
    /** Integration diagnose */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/integration/patch": {
    /** Integration patch */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/integration/reports": {
    /** Integration reports */
    get: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/integration/test": {
    /** Integration test */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/ai/specs/generate": {
    /** Generate specs and DDL from PRD */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["AISpecsGenerateRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/articles": {
    /** List articles */
    get: {
      parameters: {
        query?: {
          /**
           * @description Page size (1-1000). Prefer over legacy 'limit'
           * @example 10
           */
          pageSize?: number;
          /**
           * @description Cursor: start after the given article ID
           * @example article-id-123
           */
          afterId?: string;
          /**
           * @description Filter items by authorId
           * @example u1
           */
          authorId?: string;
          /**
           * @description Structured search: substring match on title (case-insensitive)
           * @example Hello
           */
          qTitle?: string;
          /**
           * @description Structured search: substring match on content (case-insensitive)
           * @example World
           */
          qContent?: string;
          /**
           * @description [Legacy] Max number of items (use 'pageSize')
           * @example 10
           */
          limit?: number;
          /**
           * @description [Legacy] Start offset (prefer 'afterId' cursor)
           * @example 0
           */
          offset?: number;
          /**
           * @description [Legacy] Keyword across title/content/tags (case-insensitive contains)
           * @example hello
           */
          q?: string;
        };
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
    /** Create article */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ArticleCreateRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/articles/:id": {
    /** Get article */
    get: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
    /** Update article */
    put: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ArticleUpdateRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
    /** Delete article */
    delete: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/articles/stream": {
    /**
     * Articles SSE stream
     * @description Server-Sent Events stream for article operations. Content-Type: text/event-stream. Frames include data (payload), heartbeat (keep-alive), and a terminal 'event: done'. Requires bearer authentication and 'articles' permission via RBAC. Errors follow unified ErrorResponse codes and structure.
     */
    get: {
      parameters: {
        query?: {
          /** @description Streaming mode: 'example' emits demo frames; 'list' streams current articles as JSON frames */
          mode?: "example" | "list";
          /**
           * @description Heartbeat comment frame interval in milliseconds (default 5ms; bounds 1–10000ms)
           * @example 5
           */
          heartbeatMs?: number;
          /**
           * @description Page size when mode=list (1-1000). Prefer over legacy 'limit'
           * @example 10
           */
          pageSize?: number;
          /**
           * @description Cursor: start after the given article ID when mode=list
           * @example article-id-123
           */
          afterId?: string;
          /**
           * @description Filter items by authorId when mode=list
           * @example u1
           */
          authorId?: string;
          /**
           * @description Structured search: substring match on title (case-insensitive)
           * @example Hello
           */
          qTitle?: string;
          /**
           * @description Structured search: substring match on content (case-insensitive)
           * @example World
           */
          qContent?: string;
          /**
           * @description Structured search: comma-separated tags. Use qTagsOp=all to require all tags, qTagsOp=any to match any
           * @example t1,t2
           */
          qTags?: string;
          /**
           * @description Exclude items containing any of these comma-separated tags
           * @example t3,t4
           */
          qNotTags?: string;
          /**
           * @description Tag match operator: all (intersection) or any (union); default all
           * @example all
           */
          qTagsOp?: "all" | "any";
          /**
           * @description Combine structured filters using logical 'or' or 'and' (default 'or')
           * @example or
           */
          qOp?: "or" | "and";
          /**
           * @description Tag weights mapping as 'tag:weight' pairs, comma-separated; used to score items
           * @example t1:2,t2:1
           */
          qTagWeights?: string;
          /**
           * @description Minimum cumulative tag weight threshold to include an item
           * @example 2
           */
          qTagMinWeight?: number;
          /**
           * @description Include items created within the last N milliseconds
           * @example 60000
           */
          createdWithinMs?: number;
          /**
           * @description Include items created older than N milliseconds
           * @example 3600000
           */
          createdOlderThanMs?: number;
          /**
           * @description Include items created at or after the given RFC3339 timestamp
           * @example 2025-09-30T21:00:00Z
           */
          createdStart?: string;
          /**
           * @description Include items created at or before the given RFC3339 timestamp
           * @example 2025-09-30T22:00:00Z
           */
          createdEnd?: string;
          /**
           * @description Keep stream open to push newly created matching items (mode=list)
           * @example true
           */
          follow?: boolean;
          /**
           * @description Max follow duration in milliseconds (bounds 1–60000ms; default 2000ms, env adjustable)
           * @example 2000
           */
          followMaxMs?: number;
          /**
           * @description Buffer window in milliseconds to aggregate new items before flush
           * @example 10
           */
          followBufferMs?: number;
          /**
           * @description Max items per flush batch during follow mode
           * @example 100
           */
          followBatchMax?: number;
          /**
           * @description [Legacy] Max number of items (use 'pageSize')
           * @example 10
           */
          limit?: number;
          /**
           * @description [Legacy] Start offset (prefer 'afterId' cursor)
           * @example 0
           */
          offset?: number;
          /**
           * @description [Legacy] Keyword across title/content/tags (case-insensitive contains)
           * @example hello
           */
          q?: string;
        };
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/billing/invoices": {
    /** List invoices */
    get: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/billing/orders": {
    /** Create order */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["BillingCreateOrderRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/billing/payments": {
    /** Create payment */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["BillingCreatePaymentRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/billing/plans": {
    /** List plans */
    get: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/fans/export": {
    /**
     * Export fans (CSV)
     * @description 批量导出粉丝（CSV）。需要携带审批票据头 X-Approval-Ticket，受 RBAC 权限 'fans' 控制。
     */
    post: {
      parameters: {
        header: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
          "X-Approval-Ticket": components["parameters"]["XApprovalTicket"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["FansExportRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/fans/{fanId}/active_conversation": {
    /**
     * Get fan active conversation
     * @description 查询粉丝当前活跃会话ID。如无则返回空字符串。受 RBAC 权限 'fans' 控制。
     */
    get: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
        path: {
          fanId: string;
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
    /**
     * Set fan active conversation
     * @description 设置粉丝活跃会话。若已有其他活跃会话则返回409冲突（E1400）。受 RBAC 权限 'fans' 控制。
     */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
        path: {
          fanId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ActiveConversationRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        409: components["responses"]["Error"];
        default: components["responses"]["Error"];
      };
    };
    /**
     * Clear fan active conversation
     * @description 清除粉丝活跃会话。受 RBAC 权限 'fans' 控制。
     */
    delete: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
        path: {
          fanId: string;
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/llm/chat": {
    /** Unified LLM chat */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["LLMChatRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/llm/embeddings": {
    /** Generate embeddings */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["LLMEmbeddingsRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/llm/models": {
    /** List LLM models */
    get: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/llm/moderate": {
    /** Content moderation */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["LLMModerateRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/llm/providers": {
    /** List LLM providers */
    get: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/observe/events": {
    /** Post event */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ObserveEventRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/observe/metrics": {
    /** Metrics */
    get: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/observe/traces": {
    /** Traces */
    get: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/registry": {
    /** API registry */
    get: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/registry/openapi": {
    /** OpenAPI spec */
    get: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
  "/api/v1/reply_templates/preview": {
    /** Preview reply template */
    post: {
      parameters: {
        header?: {
          "X-Request-Id"?: components["parameters"]["XRequestId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ReplyTemplatePreviewRequest"];
        };
      };
      responses: {
        200: components["responses"]["OK"];
        default: components["responses"]["Error"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Generate specs and DDL from PRD (策划.md). All fields optional with sensible defaults. */
    AISpecsGenerateRequest: {
      /** @description Dry-run flag (default true). When true, never execute DB changes. */
      dryRun?: boolean;
      /**
       * @description Optional: preview planned SQL for given channel
       * @enum {string}
       */
      execChannel?: "READ" | "CHANGE" | "ROLLBACK";
      /**
       * @description Optional: environment name for DSN resolution when executing
       * @enum {string}
       */
      execEnv?: "test" | "staging" | "prod";
      /**
       * @description Generate DDL SQL from DomainModel
       * @example false
       */
      generateDDL?: boolean;
      /**
       * @description Generate requirements/design/tasks/openapi docs
       * @example true
       */
      generateDocs?: boolean;
      /** @description Source spec for structured merge (openapi/jsonschema) under .spec-workflow/specs/{sourceSpec} */
      sourceSpec?: string;
      /**
       * @description Spec name under .spec-workflow/specs/{specName}
       * @example ai-codegen
       */
      specName?: string;
      /** @description Ticket ID for approval when executing change/rollback */
      ticketId?: string;
      /** @description Use structured merge when available */
      useStructured?: boolean;
      /** @description Also write DDL files into .spec-workflow/db/mysql */
      writeWorkflowDDL?: boolean;
    };
    /** @description Response data for /api/v1/ai/specs/generate */
    AISpecsGenerateResponseData: {
      entities?: number;
      files?: {
        [key: string]: string;
      };
      issues?: components["schemas"]["ClarifyIssue"][];
      operationId?: string;
      relations?: number;
      sourceSpec?: string;
      specName?: string;
      sqlHash?: string;
      sqlPreview?: string[];
    };
    /** @description 清除粉丝活跃会话后的返回数据 */
    ActiveConversationClearedData: {
      cleared?: boolean;
      fanId?: string;
    };
    /** @description 粉丝当前活跃会话返回数据 */
    ActiveConversationData: {
      conversationId?: string;
      fanId?: string;
    };
    ActiveConversationRequest: {
      conversationId: string;
    };
    Article: {
      authorId: string;
      content: string;
      /** Format: date-time */
      createdAt: string;
      id: string;
      tags?: string[];
      title: string;
      /** Format: date-time */
      updatedAt: string;
    };
    ArticleCreateRequest: {
      authorId: string;
      content: string;
      tags?: string[];
      title: string;
    };
    /** @description Single article response data */
    ArticleData: {
      item?: components["schemas"]["Article"];
    };
    /** @description Partial update; all fields optional */
    ArticleUpdateRequest: {
      content?: string;
      tags?: string[];
      title?: string;
    };
    /** @description List data for /api/v1/articles */
    ArticlesListData: {
      items?: components["schemas"]["Article"][];
      page?: components["schemas"]["PageMeta"];
    };
    /** @description Public login request to issue HS256 JWT */
    AuthLoginRequest: {
      /** @example 3600 */
      expiresInSec?: number;
      /**
       * @example [
       *   "articles"
       * ]
       */
      permissions?: string[];
      /** @example u1 */
      userId?: string;
    };
    /** @description Public login response containing JWT and claims */
    AuthLoginResponse: {
      /** @description Unix timestamp (seconds) */
      expiresAt: number;
      permissions?: string[];
      /** @description HS256 JWT */
      token: string;
      userId: string;
    };
    BackendFixRequest: {
      diff: Record<string, never>;
      reportId: string;
    };
    BackendGenerateRequest: {
      name: string;
      spec: Record<string, never>;
      template?: string;
    };
    BackendScaffoldRequest: {
      endpoints: string[];
      serviceName: string;
    };
    BillingCreateOrderRequest: {
      amount: number;
      currency: string;
      productId: string;
    };
    BillingCreatePaymentRequest: {
      method: string;
      orderId: string;
    };
    /** @description 导出澄清产物为 Markdown 文件。仅支持 format=md。 */
    ClarifyExportMarkdownRequest: {
      /**
       * @description 导出格式（仅支持md）
       * @enum {string}
       */
      format?: "md";
      /**
       * @description 输出语言
       * @example zh-CN
       */
      language?: string;
      /** @description 自然语言 prompt */
      prompt?: string;
    };
    /** @description 澄清文档导出结果（Markdown/PDF/DOCX）。download 字段在 PDF/DOCX 导出返回。 */
    ClarifyExportResponseData: {
      /** @description 受限下载路径（/api/v1/ai/clarify/docs/:name），仅在pdf/docx导出时返回 */
      download?: string;
      fileName?: string;
      filePath?: string;
      /** @enum {string} */
      format?: "md" | "pdf" | "docx";
    };
    /** @description Clarify generation input from natural language prompt */
    ClarifyGenerateRequest: {
      /**
       * @description 期望输出语言，例如 zh-CN、en-US
       * @example zh-CN
       */
      language?: string;
      /** @description 用户输入的业务或需求描述（自然语言） */
      prompt?: string;
      /**
       * @description 是否要求流式输出（SSE/WS）
       * @example false
       */
      stream?: boolean;
      /**
       * @description 是否使用结构化解析（更严格、更可控）
       * @example false
       */
      useStructured?: boolean;
    };
    /** @description Structured clarify artifacts: requirements/design/tasks and minimal OpenAPI fragment */
    ClarifyGenerateResponseData: {
      design?: string[];
      issues?: components["schemas"]["ClarifyIssue"][];
      openapi?: Record<string, never>;
      requirements?: string[];
      tasks?: string[];
    };
    /** @description Clarification issues discovered during PRD parsing */
    ClarifyIssue: {
      ID?: string;
      Message?: string;
      Resolved?: boolean;
      /** @enum {string} */
      Severity?: "blocker" | "warning" | "info";
    };
    ErrorResponse: {
      /** @enum {string} */
      code: "E1000" | "E1100" | "E1200" | "E1300" | "E1400" | "E1500" | "E2000" | "E2100" | "E3000" | "E3100";
      detail?: Record<string, never>;
      hint?: string;
      message: string;
      requestId: string;
      /** @enum {string} */
      severity?: "info" | "warning" | "error";
    };
    /** @description 批量导出粉丝；支持过滤并需审批票据 */
    FansExportRequest: {
      /** @description 是否活跃过滤 */
      active?: boolean;
      /** @description 主播ID过滤 */
      anchorId?: string;
      /**
       * @description 导出格式（目前仅支持csv）
       * @enum {string}
       */
      format?: "csv";
      /** @description 标签ID集合（任一匹配） */
      tagIds?: string[];
    };
    /** @description 批量导出结果数据（占位） */
    FansExportResponseData: {
      /** @description CSV文本内容 */
      csvContent?: string;
      filters?: components["schemas"]["FansExportRequest"];
      format?: string;
    };
    FrontendCommitRequest: {
      message?: string;
      snapshotId: string;
    };
    FrontendGenerateRequest: {
      dsl: Record<string, never>;
      name: string;
      permissions?: string[];
      template?: string;
    };
    FrontendValidateRequest: {
      dsl: Record<string, never>;
    };
    LLMChatRequest: {
      messages: {
          content: string;
          role: string;
        }[];
      modelId: string;
      providerHint?: string;
      stream?: boolean;
      temperature?: number;
      topP?: number;
    };
    LLMEmbeddingsRequest: {
      input: string[];
      modelId: string;
    };
    LLMModerateRequest: {
      input: string;
    };
    ObserveEventRequest: {
      message?: string;
      severity: string;
      type: string;
    };
    /** @description Cursor-based pagination metadata */
    PageMeta: {
      hasMore?: boolean;
      nextAfterId?: string;
      pageSize?: number;
      total?: number;
    };
    ReplyTemplatePreviewRequest: {
      /** @description 模板内容，支持 {{var}} 变量 */
      content: string;
      /** @description 变量Schema（简化版） */
      schema?: {
        properties?: {
          [key: string]: {
            /** @enum {string} */
            type?: "string" | "number" | "boolean";
          };
        };
        required?: string[];
      };
      /** @description 严格模式：校验失败直接返回400 */
      strict?: boolean;
      /** @description 变量值字典 */
      vars?: Record<string, never>;
    };
    Response: {
      /** @enum {string} */
      code: "OK";
      data?: Record<string, never>;
      message: string;
      requestId: string;
      /** @enum {string} */
      severity?: "info" | "warning" | "error";
    };
  };
  responses: {
    /** @description Error */
    Error: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description OK */
    OK: {
      content: {
        "application/json": components["schemas"]["Response"];
      };
    };
  };
  parameters: {
    /** @description 审批票据；需在白名单(APPROVAL_TICKETS)中 */
    XApprovalTicket: string;
    XRequestId?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
