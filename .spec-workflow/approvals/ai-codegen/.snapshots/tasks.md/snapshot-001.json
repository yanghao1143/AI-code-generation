{
  "id": "snapshot_1759235459674_z357d5jbj",
  "approvalId": "approval_1759235459667_sntivisfi",
  "approvalTitle": "ai-codegen 规格：任务清单（tasks.md）审批",
  "version": 1,
  "timestamp": "2025-09-30T12:30:59.674Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# 任务清单（ai-codegen）\n\n- [ ] 合同生成：结构化 Prompt → OpenAPI/JSON Schema\n  - _Prompt:\n    Implement the task for spec ai-codegen, first run spec-workflow-guide to get the workflow guide then implement the task:\n    Role: Contract Engineer (Schema-first)\n    Task: Build a generator that converts structured prompts (role/goal/boundary/output) into OpenAPI (paths/schemas/responses) and JSON Schema. Integrate with `cmd/openapi/main.go` and register via `internal/registry/openapi.go`.\n    Restrictions: Follow steering/tech.md; do not exceed fields/errors beyond schema; avoid new libs outside whitelist.\n    _Leverage: `.spec-workflow/sources/策划.md`, `cmd/openapi/main.go`, `internal/registry/openapi.go`.\n    _Requirements: Schema-first source of truth; unified error codes; camelCase fields; RFC3339 timestamps.\n    Success: Produces valid OpenAPI/JSON Schema, passes contract validation, and is accessible through `cmd/openapi`.\n\n- [ ] 后端脚手架：依据合同生成 Gin 路由与分层骨架（articles 示例）\n  - _Prompt:\n    Implement the task for spec ai-codegen, first run spec-workflow-guide to get the workflow guide then implement the task:\n    Role: Backend Scaffold Engineer (Go/Gin)\n    Task: From OpenAPI, scaffold `internal/articles/{routes.go, types.go, service.go, repo.go}`; bind requests via `internal/validation/bind.go`; use `internal/api/response.go` for success/error envelopes.\n    Restrictions: Maintain layers (router/service/repo/middleware); no cross-layer coupling; error codes map to HTTP strictly.\n    _Leverage: `internal/api/response.go`, `internal/validation/bind.go`, `internal/middleware/*`.\n    _Requirements: Resource-first paths; query params for pagination/filter; idempotency for PUT/DELETE.\n    Success: Compiles and routes registered in `cmd/app/main.go` with correct middleware chain.\n\n- [ ] 中间件注入与错误治理：auth/rbac/ratelimit/request_id/error_handler 顺序\n  - _Prompt:\n    Implement the task for spec ai-codegen, first run spec-workflow-guide to get the workflow guide then implement the task:\n    Role: Middleware Integrator\n    Task: Ensure generated routes auto-inject middlewares in order: request_id → auth → rbac → ratelimit → error_handler; standardize error envelopes and codes.\n    Restrictions: No custom error shapes; use shared middlewares only; keep chain order.\n    _Leverage: `internal/middleware/auth.go`, `rbac.go`, `ratelimit.go`, `request_id.go`, `error_handler.go`.\n    _Requirements: Authorization header `Bearer`; `X-User-Permissions` for RBAC; rate limit headers.\n    Success: Integration tests show correct status/code mapping and middleware effects.\n\n- [ ] 前端脚手架：依据合同生成页面/组件与 API 客户端（articles 示例）\n  - _Prompt:\n    Implement the task for spec ai-codegen, first run spec-workflow-guide to get the workflow guide then implement the task:\n    Role: Frontend Scaffold Engineer (React/TS)\n    Task: Generate `frontend/articles/{List.tsx, Form.tsx, Detail.tsx}`, shared `frontend/components/{Loading.tsx, Error.tsx, Empty.tsx}`, and `frontend/api/client.ts` from OpenAPI.\n    Restrictions: ESLint/Prettier/TS only; avoid heavy UI libs; follow camelCase and schema types.\n    _Leverage: OpenAPI → TS type generator (implement minimal internal mapping), contract schemas.\n    _Requirements: Unified loading/error/empty states; auth via `Authorization: Bearer`.\n    Success: Pages compile and call generated client; smoke tests pass.\n\n- [ ] 契约与集成测试：覆盖请求/响应/错误码与中间件场景\n  - _Prompt:\n    Implement the task for spec ai-codegen, first run spec-workflow-guide to get the workflow guide then implement the task:\n    Role: Test Engineer (Contract & Integration)\n    Task: Create tests for `internal/articles` routes verifying request/response and error codes; include auth/rbac/ratelimit behaviors; add contract tests against OpenAPI.\n    Restrictions: Use `internal/testassert`; avoid bespoke assertions; no external test libs.\n    _Leverage: `internal/testassert/assert.go`, `internal/llm/routes_test.go` SSE patterns, `internal/registry/openapi_test.go`.\n    _Requirements: Coverage ≥ 70%; SSE/stream behavior validated where applicable.\n    Success: `go test ./... -v` passes; contract tests succeed with no schema drift.\n\n- [ ] SSE/流式接口示例与测试（articles/stream）\n  - _Prompt:\n    Implement the task for spec ai-codegen, first run spec-workflow-guide to get the workflow guide then implement the task:\n    Role: Streaming Engineer\n    Task: Implement `internal/articles/stream.go` with SSE writer and route; add `internal/articles/stream_test.go` covering event sequence and termination.\n    Restrictions: Follow standard event format; ensure graceful close; reuse middleware chain.\n    _Leverage: SSE patterns in `internal/llm/routes.go` and tests.\n    _Requirements: Correct `Content-Type: text/event-stream`; heartbeat/close semantics.\n    Success: Tests validate event order and proper termination.\n\n- [ ] CI/CD 门禁与回滚：新增合同测试与安全扫描阶段\n  - _Prompt:\n    Implement the task for spec ai-codegen, first run spec-workflow-guide to get the workflow guide then implement the task:\n    Role: DevOps Engineer\n    Task: Update `Makefile` to add `contract` target and integrate `tidy → lint → test → contract → build → deploy`; include static/security scans; document rollback plan.\n    Restrictions: Do not introduce external CI services; keep repo-local gates.\n    _Leverage: Existing `Makefile`, repository structure.\n    _Requirements: Blocking gates for contract/security; changelog and rollback script template.\n    Success: Local pipeline runs green and enforces gates; rollback script available.\n\n- [ ] 预览与审批：隔离环境与变更/质量报告产出\n  - _Prompt:\n    Implement the task for spec ai-codegen, first run spec-workflow-guide to get the workflow guide then implement the task:\n    Role: Release Engineer\n    Task: Add `scripts/preview.sh` to launch isolated preview, generate diff (contract changes), performance report, and security scan report; prepare approval artifacts.\n    Restrictions: No production credentials; sanitize logs; avoid persistent side effects.\n    _Leverage: Contract generator, tests, Makefile targets.\n    _Requirements: Reports stored under `scripts/reports/` with `requestId` linkage.\n    Success: Preview runs, reports generated, and artifacts ready for approval.",
  "fileStats": {
    "size": 6494,
    "lines": 81,
    "lastModified": "2025-09-30T12:30:45.179Z"
  },
  "comments": []
}