{
  "id": "snapshot_1759235395957_ryc8g8z4r",
  "approvalId": "approval_1759235395948_4pljlw5mr",
  "approvalTitle": "ai-codegen 规格：设计文档（design.md）审批",
  "version": 1,
  "timestamp": "2025-09-30T12:29:55.957Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# 设计说明（ai-codegen）\n\n## 概述\n- 目标：以 Schema-first 为核心，通过结构化 Prompt 生成 OpenAPI/JSON Schema，自动产出后端 Gin 路由与前端页面骨架，并完成契约/集成/性能测试与联调。\n- 约束：严格遵循 `steering/tech.md` 与 `structure.md`；统一错误码与响应包；分层与依赖边界清晰；防幻觉治理与模板白名单。\n\n## 总体架构\n- 生成器：Prompt 解析器 → 契约生成器（OpenAPI/JSON Schema）→ 脚手架生成器（后端/前端）→ 测试生成器（契约/集成/性能）。\n- 后端（Go/Gin）：\n  - 路由层：根据契约生成 `routes.go` 与 `router.go` 注册。\n  - 中间件：统一鉴权、RBAC、限流、请求ID、错误处理，自动注入至新路由。\n  - 服务层/仓储层：按模板生成接口与占位实现，保留业务逻辑插点。\n  - 统一响应：成功 `{data, requestId}`；失败 `{code, message, requestId, severity, details}`；错误码与 HTTP 状态映射。\n- 前端（React/TypeScript）：\n  - 组件/页面：根据契约生成表单/列表/详情等页面骨架；统一 Loading/Error/空态组件。\n  - 状态管理：轻量化（如 React Query/Zustand），API 客户端自动生成并绑定。\n  - 风格与质量：ESLint/Prettier/TS，接口类型由 JSON Schema/TS 类型生成器产出。\n- 联调与测试：\n  - 契约测试：请求/响应与错误码一致性校验（含 SSE/流式）。\n  - 集成测试：中间件（鉴权、限流、RBAC）与场景用例覆盖；可在隔离预览环境运行。\n  - 性能基线：关键路由的吞吐与 P95 延迟基线与报告。\n\n## 生成流程设计（端到端）\n1. 结构化 Prompt（角色、目标、边界、输出格式）→ 解析为领域模型与资源。\n2. 契约优先：产出 OpenAPI/JSON Schema（资源、动作、字段、错误码、分页与过滤）。\n3. 后端脚手架：\n   - 生成 Gin 路由与请求绑定、统一响应、错误码；\n   - 自动注入 `auth/ratelimit/rbac/request_id/error_handler` 中间件；\n   - 生成服务与仓储接口占位；\n   - SSE/流式接口的 Writer 模板与测试样例。\n4. 前端脚手架：\n   - 按契约生成页面组件（表单/列表等）与 API 客户端；\n   - 统一 Loading/Error/空态与基本布局；\n   - 依据 JSON Schema 生成 TS 类型与表单校验。\n5. 测试生成：\n   - 契约测试（OpenAPI 合同校验）与集成测试（含中间件用例）；\n   - 性能测试脚本与门禁阈值；\n   - 流式/SSE 的事件序列一致性校验。\n6. 质量门禁：`tidy → lint → test → contract → build → deploy`；安全与依赖扫描；破坏性变更差异报告。\n7. 预览与审批：隔离环境、变更与质量报告；审批通过后灰度发布，异常自动回滚与复盘记录。\n\n## 后端详细设计\n- 目录结构（参考现有仓库惯例）：\n  - `internal/llm|billing|observe` 等模块保持分层；生成的新模块遵循 `routes.go / types.go / service.go / repo.go` 模式。\n  - 统一响应位于 `internal/api/response.go`；绑定助手 `internal/validation/bind.go`；断言工具 `internal/testassert/assert.go`。\n- 路由规则：资源优先，动作二级；分页与过滤采用查询参数；幂等性要求对 PUT/DELETE/POST 资源化处理。\n- 错误治理：错误码集合与 HTTP 映射按 `tech.md`；中间件链顺序：`request_id → auth → rbac → ratelimit → error_handler`。\n- SSE/流式：统一事件封包与关闭时机；测试覆盖事件序列与终止。\n\n## 前端详细设计\n- 技术栈：React + TypeScript；样式与组件库可抽象为通用层，优先保持最小依赖。\n- 页面生成：根据契约生成表单/列表/详情页面骨架；错误/空态与 Loading 统一组件。\n- API 客户端：OpenAPI → TS 客户端生成器；携带 `Authorization: Bearer` 与 `X-User-Permissions`。\n- 状态管理：React Query 处理请求与缓存；必要时以 Zustand 管理局部业务状态。\n\n## 测试与质量保障\n- 单元测试：核心逻辑与路由；覆盖率目标 ≥ 70%。\n- 集成测试：中间件与联调场景；统一使用 `internal/testassert`；SSE 行为必测。\n- 契约测试：OpenAPI 合同校验（字段/错误码/流式）作为 CI 必选；破坏性变更出差异报告。\n- 性能测试：关键路径 P95 与吞吐门槛；发布需附性能报告。\n\n## 安全与合规\n- 鉴权与 RBAC：统一中间件；权限通过 `X-User-Permissions` 注入；最小权限原则。\n- 日志与审计：请求脱敏、字段级审计；生成记录可追溯（requestId、模型/版本、模板与差异）。\n- 依赖与 Secrets：模板白名单与版本范围；Secrets 扫描与治理必过。\n\n## CI/CD 与发布\n- 流水线：`tidy → lint → test → contract → build → deploy → gray → rollback`。\n- 版本语义：SemVer；契约变更同步版本提升与文档更新。\n- 回滚策略：构建产物与迁移脚本支持降级；异常触发自动回滚与事件复盘。\n\n## 目录与产物（示意）\n```\n.spec-workflow/specs/ai-codegen/\n  ├─ requirements.md\n  ├─ design.md\n  └─ tasks.md (后续生成)\ninternal/\n  ├─ api/response.go (复用)\n  ├─ validation/bind.go (复用)\n  ├─ middleware/* (复用)\n  ├─ testassert/assert.go (复用)\n  └─ <new-module>/routes.go|types.go|service.go|repo.go (生成)\nfrontend/\n  └─ <new-pages>/List|Form|Detail + api client (生成)\n```\n\n## 风险与缓解\n- 幻觉与越界生成：以合同为唯一真实来源；差异报告与审批；依赖白名单。\n- 质量漂移：强制契约/集成/性能门禁；基线与指标看板；异常复盘。\n- 安全与合规：鉴权/RBAC/日志脱敏/审计/Secrets 扫描作为 CI 阶段阻断项。\n\n## 里程碑与验收\n- 按 `requirements.md` 成功准则：契约、代码、测试与报告全部产出并通过流水线与审批；支持灰度与回滚，生成记录可审计。",
  "fileStats": {
    "size": 5968,
    "lines": 94,
    "lastModified": "2025-09-30T12:29:44.918Z"
  },
  "comments": []
}